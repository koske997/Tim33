"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("../utils");

var _Radio = _interopRequireDefault(require("./Radio"));

var _RadioGroup = _interopRequireDefault(require("./RadioGroup"));

var _Checkbox = _interopRequireDefault(require("./Checkbox"));

var _CheckboxGroup = _interopRequireDefault(require("./CheckboxGroup"));

var _Select = _interopRequireDefault(require("./Select"));

var _Textarea = _interopRequireDefault(require("./Textarea"));

var _Input = _interopRequireDefault(require("./Input"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var createComponent = function createComponent(type, options) {
  switch (type) {
    case 'checkbox':
      if (options) return _CheckboxGroup["default"];
      return _Checkbox["default"];

    case 'radio':
      if (options) return _RadioGroup["default"];
      return _Radio["default"];

    case 'select':
      return _Select["default"];

    case 'textarea':
      return _Textarea["default"];

    default:
      return _Input["default"];
  }
};

var FormElement =
/*#__PURE__*/
function (_React$Component) {
  _inherits(FormElement, _React$Component);

  function FormElement() {
    _classCallCheck(this, FormElement);

    return _possibleConstructorReturn(this, _getPrototypeOf(FormElement).apply(this, arguments));
  }

  _createClass(FormElement, [{
    key: "getID",
    value: function getID() {
      var name = this.props.name;
      return "input_".concat(name);
    }
  }, {
    key: "renderInput",
    value: function renderInput() {
      var _this$props = this.props,
          options = _this$props.options,
          type = _this$props.type;

      var _this$props2 = this.props,
          label = _this$props2.label,
          inputRef = _this$props2.inputRef,
          className = _this$props2.className,
          inputClassname = _this$props2.inputClassname,
          fieldProps = _objectWithoutProperties(_this$props2, ["label", "inputRef", "className", "inputClassname"]);

      var _this$context = this.context,
          _onChange = _this$context.onChange,
          isValid = _this$context.isValid;

      var props = _objectSpread({}, fieldProps, {
        onChange: function onChange(e) {
          _onChange(e);

          if (fieldProps.onChange) {
            fieldProps.onChange(e);
          }

          if (fieldProps.validateOnChange) {
            fieldProps.validateOnChange(isValid(e.target));
          }
        },
        id: this.getID()
      });

      if (inputClassname) {
        props = _objectSpread({}, props, {
          className: inputClassname
        });
      }

      if (type === 'select' || ['checkbox', 'radio'].includes(type) && options) {
        props = _objectSpread({}, props, {
          options: options && (0, _utils.convertOptions)(options)
        });
      }

      if (['checkbox', 'radio'].includes(type) && !options) {
        props = _objectSpread({}, props, {
          label: label
        });
      }

      if (inputRef) {
        props = _objectSpread({}, props, {
          ref: inputRef
        });
      }

      var InputComponent = createComponent(type, options);
      return _react["default"].createElement(InputComponent, props);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          label = _this$props3.label,
          name = _this$props3.name,
          className = _this$props3.className,
          children = _this$props3.children,
          type = _this$props3.type,
          options = _this$props3.options;
      var showErrorMessage = this.context.showErrorMessage;
      if (children) return typeof children === 'function' ? children(this.context) : children;
      return _react["default"].createElement("div", {
        className: (0, _classnames["default"])('form-element', className)
      }, label && (['checkbox', 'radio'].includes(type) ? options : true) && _react["default"].createElement("label", {
        htmlFor: this.getID()
      }, label), _react["default"].createElement("div", {
        className: "input-wrap"
      }, this.renderInput()), showErrorMessage(name));
    }
  }]);

  return FormElement;
}(_react["default"].Component);

_defineProperty(FormElement, "contextType", _utils.Context);

FormElement.propTypes = {
  options: _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number, _propTypes["default"].shape({
    label: _propTypes["default"].string,
    value: _propTypes["default"].string
  })])),
  label: _propTypes["default"].string
};
var _default = FormElement;
exports["default"] = _default;