"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var FormSubmit = function FormSubmit(_ref) {
  var children = _ref.children,
      text = _ref.text,
      loadingText = _ref.loadingText,
      props = _objectWithoutProperties(_ref, ["children", "text", "loadingText"]);

  return _react["default"].createElement(_utils.Context.Consumer, null, function (context) {
    if (children) return typeof children === 'function' ? children(context) : children;
    var isLoading = context.isLoading;
    return _react["default"].createElement("button", _extends({
      type: "submit",
      disabled: isLoading
    }, props), isLoading && loadingText || text);
  });
};

FormSubmit.defaultProps = {
  text: 'Send',
  loadingText: 'Sending'
};
FormSubmit.propTypes = {
  text: _propTypes["default"].string,
  loadingText: _propTypes["default"].string
};
var _default = FormSubmit;
exports["default"] = _default;