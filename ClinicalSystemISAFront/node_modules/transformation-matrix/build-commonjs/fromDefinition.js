"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromDefinition = fromDefinition;

var _fromObject = require("./fromObject");

var _translate = require("./translate");

var _scale = require("./scale");

var _rotate = require("./rotate");

var _skew = require("./skew");

var _shear = require("./shear");

function fromDefinition(definitionOrArrayOfDefinition) {
  return Array.isArray(definitionOrArrayOfDefinition) ? definitionOrArrayOfDefinition.map(mapper) : mapper(definitionOrArrayOfDefinition);

  function mapper(descriptor) {
    switch (descriptor.type) {
      case 'matrix':
        if ('a' in descriptor && 'b' in descriptor && 'c' in descriptor && 'd' in descriptor && 'e' in descriptor && 'f' in descriptor) {
          return (0, _fromObject.fromObject)(descriptor);
        } else {
          throw new Error('MISSING_MANDATORY_PARAM');
        }

      case 'translate':
        if (!('tx' in descriptor)) throw new Error('MISSING_MANDATORY_PARAM');
        if ('ty' in descriptor) return (0, _translate.translate)(descriptor.tx, descriptor.ty);
        return (0, _translate.translate)(descriptor.tx);

      case 'scale':
        if (!('sx' in descriptor)) throw new Error('MISSING_MANDATORY_PARAM');
        if ('sy' in descriptor) return (0, _scale.scale)(descriptor.sx, descriptor.sy);
        return (0, _scale.scale)(descriptor.sx);

      case 'rotate':
        if (!('angle' in descriptor)) throw new Error('MISSING_MANDATORY_PARAM');

        if ('cx' in descriptor && 'cy' in descriptor) {
          return (0, _rotate.rotateDEG)(descriptor.angle, descriptor.cx, descriptor.cy);
        }

        return (0, _rotate.rotateDEG)(descriptor.angle);

      case 'skewX':
        if (!('angle' in descriptor)) throw new Error('MISSING_MANDATORY_PARAM');
        return (0, _skew.skewDEG)(descriptor.angle, 0);

      case 'skewY':
        if (!('angle' in descriptor)) throw new Error('MISSING_MANDATORY_PARAM');
        return (0, _skew.skewDEG)(0, descriptor.angle);

      case 'shear':
        if (!('shx' in descriptor && 'shy' in descriptor)) throw new Error('MISSING_MANDATORY_PARAM');
        return (0, _shear.shear)(descriptor.shx, descriptor.shy);

      default:
        throw new Error('UNSUPPORTED_DESCRIPTOR');
    }
  }
}